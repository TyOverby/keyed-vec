var searchIndex = {};
searchIndex['indexed_vec'] = {"items":[[0,"","indexed_vec","",null,null],[3,"Index","","",null,null],[3,"IndexedVec","","IndexedVec is a vector with a unique approach to indices.\nOnce an item is added to the IndexedVec, a _unique_ index is returned.\nThis index is the only way that that element may be accessed, and it\nis garunteed by the rust typesystem for there only to be one of these\nindices at one point in time.",null,null],[11,"new","","Creates a new BoundedArray with a given size.",0,{"inputs":[{"name":"indexedvec"}],"output":{"name":"indexedvec"}}],[11,"with_capacity","","",0,{"inputs":[{"name":"indexedvec"},{"name":"usize"}],"output":{"name":"indexedvec"}}],[11,"add","","Adds an element to the BoundedVec.",0,{"inputs":[{"name":"indexedvec"},{"name":"t"}],"output":{"name":"index"}}],[11,"push","","Adds an element to the BoundedVec.",0,{"inputs":[{"name":"indexedvec"},{"name":"t"}],"output":{"name":"index"}}],[11,"get","","Returns a reference to an element in the array.",0,{"inputs":[{"name":"indexedvec"},{"name":"index"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to an element in the array.",0,{"inputs":[{"name":"indexedvec"},{"name":"index"}],"output":{"name":"t"}}],[11,"swap","","Swaps the element at an index, returning the previous value.",0,{"inputs":[{"name":"indexedvec"},{"name":"index"},{"name":"t"}],"output":{"name":"t"}}],[11,"take","","Remove the element stored at Index location, returning it.",0,{"inputs":[{"name":"indexedvec"},{"name":"index"}],"output":{"name":"t"}}],[11,"remove","","Removes the element stored at Index location, dropping it.",0,{"inputs":[{"name":"indexedvec"},{"name":"index"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"indexedvec"}],"output":null}]],"paths":[[3,"IndexedVec"]]};
initSearch(searchIndex);
